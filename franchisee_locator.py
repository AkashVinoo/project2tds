from typing import List, Tuple
import math
from scipy.spatial import ConvexHull
import numpy as np

# Ray-casting algorithm for point-in-polygon
# https://en.wikipedia.org/wiki/Point_in_polygon

def point_in_poly(point: Tuple[float, float], poly: List[Tuple[float, float]]) -> bool:
    x, y = point
    n = len(poly)
    inside = False
    p1x, p1y = poly[0]
    for i in range(n+1):
        p2x, p2y = poly[i % n]
        if min(p1y, p2y) < y <= max(p1y, p2y):
            if x <= max(p1x, p2x):
                if p1y != p2y:
                    xinters = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x
                if p1x == p2x or x <= xinters:
                    inside = not inside
        p1x, p1y = p2x, p2y
    return inside

def convex_hull(points: List[Tuple[float, float]]) -> List[Tuple[float, float]]:
    if len(points) < 3:
        return points
    arr = np.array(points)
    hull = ConvexHull(arr)
    return [tuple(arr[v]) for v in hull.vertices]

def polygon_area(poly: List[Tuple[float, float]]) -> float:
    n = len(poly)
    area = 0.0
    for i in range(n):
        x1, y1 = poly[i]
        x2, y2 = poly[(i+1)%n]
        area += x1*y2 - x2*y1
    return abs(area) / 2.0

def centroid(poly: List[Tuple[float, float]]) -> Tuple[float, float]:
    x = sum(p[0] for p in poly) / len(poly)
    y = sum(p[1] for p in poly) / len(poly)
    return (x, y)

def dist(a, b):
    return math.hypot(a[0]-b[0], a[1]-b[1])

# Franchisee polygons (lat, lon)
franchisees = [
    # 1
    [
        (28.6139,77.209), (19.076,72.8777), (23.588,58.3829), (24.8607,67.0011), (31.5204,74.3587), (6.9271,79.8612), (27.7172,85.324)
    ],
    # 2
    [
        (6.2088,106.8456), (14.5995,120.9842), (10.8231,106.6297), (21.0285,105.8542), (1.3521,103.8198), (22.3193,114.1694)
    ],
    # 3
    [
        (52.2297,21.0122), (60.1695,24.9354), (59.3293,18.0686), (55.7558,37.6176), (41.0082,28.9784)
    ],
    # 4
    [
        (55.6761,12.5683), (52.52,13.405), (60.1695,24.9354), (59.3293,18.0686), (59.9139,10.7522), (52.3676,4.9041)
    ],
    # 5
    [
        (51.1694,71.4491), (41.0082,28.9784), (55.7558,37.6176), (40.4093,49.8671), (40.1872,44.5152), (41.7151,44.8271)
    ],
    # 6
    [
        (30.0444,31.2357), (37.9838,23.7275), (52.2297,21.0122), (47.4979,19.0402), (41.0082,28.9784), (41.9028,12.4964)
    ],
    # 7
    [
        (51.5074,-0.1278), (48.8566,2.3522), (50.8503,4.3517), (50.0755,14.4378), (47.3769,8.5417), (52.52,13.405), (52.3676,4.9041)
    ],
    # 8
    [
        (51.1694,71.4491), (47.8864,106.9057), (60.1695,24.9354), (55.7558,37.6176)
    ],
    # 9
    [
        (40.7128,-74.006), (43.65107,-79.347015), (33.749,-84.388), (33.4489,-70.6693)
    ],
    # 10
    [
        (24.453884,54.377343), (21.2854,39.2376), (24.7136,46.6753), (1.944072,30.061885), (9.005401,38.763611), (32.0853,34.7818)
    ],
    # 11
    [
        (41.3851,2.1734), (41.9028,12.4964), (40.4168,-3.7038), (33.589886,-7.603869), (36.737232,3.086472)
    ],
    # 12
    [
        (32.0853,34.7818), (29.3759,47.9774), (35.6892,51.389), (24.8607,67.0011), (41.2995,69.2401), (40.4093,49.8671), (40.1872,44.5152)
    ],
    # 13
    [
        (25.7617,-80.1918), (29.7604,-95.3698), (32.7767,-96.797), (33.749,-84.388)
    ],
    # 14
    [
        (25.276987,55.296249), (24.453884,54.377343), (25.276987,51.520008), (29.3759,47.9774), (35.6892,51.389), (24.8607,67.0011)
    ],
    # 15
    [
        (30.0444,31.2357), (21.2854,39.2376), (41.0082,28.9784), (8.838333,13.234444), (32.0853,34.7818)
    ],
    # 16
    [
        (51.5074,-0.1278), (48.8566,2.3522), (33.589886,-7.603869), (53.3498,-6.2603), (34.6037,-58.3816), (40.4168,-3.7038), (38.7223,-9.1393)
    ],
    # 17
    [
        (6.5244,3.3792), (5.603716,-0.187), (33.589886,-7.603869), (36.737232,3.086472), (4.441931,15.266293)
    ],
    # 18
    [
        (42.8746,74.5698), (51.1694,71.4491), (24.8607,67.0011), (33.6844,73.0479), (41.2995,69.2401), (40.4093,49.8671)
    ],
    # 19
    [
        (30.0444,31.2357), (33.9249,18.4241), (41.9028,12.4964), (37.9838,23.7275), (36.737232,3.086472)
    ],
    # 20
    [
        (12.0464,-77.0428), (25.7617,-80.1918), (29.7604,-95.3698), (19.432608,-99.133209)
    ],
    # 21
    [
        (31.9505,115.8605), (34.6937,135.5023), (14.5995,120.9842), (39.9042,116.4074), (25.032969,121.565418), (31.2304,121.4737), (22.3193,114.1694)
    ],
    # 22
    [
        (25.7617,-80.1918), (34.6037,-58.3816), (33.749,-84.388), (33.4489,-70.6693), (10.4806,-66.9036)
    ],
    # 23
    [
        (34.0522,-118.2437), (47.6062,-122.3321), (41.8781,-87.6298), (33.4484,-112.074), (32.7157,-117.1611), (19.432608,-99.133209)
    ],
    # 24
    [
        (1.3521,103.8198), (23.588,58.3829), (3.139,101.6869), (1.286389,36.817223), (6.9271,79.8612), (9.005401,38.763611)
    ],
    # 25
    [
        (47.8864,106.9057), (43.2565,76.9283), (21.0285,105.8542), (23.8103,90.4125), (27.7172,85.324)
    ],
    # 26
    [
        (38.7223,-9.1393), (34.6037,-58.3816), (22.9068,-43.1729), (10.4806,-66.9036), (23.5505,-46.6333)
    ],
    # 27
    [
        (5.603716,-0.187), (19.432608,-99.133209), (1.944072,30.061885), (12.0464,-77.0428), (4.711,-74.0721), (22.9068,-43.1729), (10.4806,-66.9036)
    ],
    # 28
    [
        (5.603716,-0.187), (4.441931,15.266293), (1.944072,30.061885), (8.838333,13.234444)
    ],
    # 29
    [
        (49.2827,-123.1207), (47.6062,-122.3321), (41.8781,-87.6298), (37.7749,-122.4194)
    ],
    # 30
    [
        (12.0464,-77.0428), (10.4806,-66.9036), (25.7617,-80.1918)
    ],
    # 31
    [
        (6.2088,106.8456), (1.3521,103.8198), (3.139,101.6869), (10.8231,106.6297)
    ],
    # 32
    [
        (36.8485,174.7633), (41.2865,174.7762), (27.4698,153.0251), (33.8688,151.2093)
    ],
    # 33
    [
        (49.2827,-123.1207), (45.5017,-73.5673), (41.8781,-87.6298), (43.65107,-79.347015), (33.749,-84.388)
    ],
    # 34
    [
        (3.139,101.6869), (10.8231,106.6297), (6.9271,79.8612), (13.7563,100.5018)
    ],
    # 35
    [
        (47.8864,106.9057), (31.9505,115.8605), (39.9042,116.4074), (21.0285,105.8542), (31.2304,121.4737), (22.3193,114.1694), (37.5665,126.978)
    ],
    # 36
    [
        (52.2297,21.0122), (47.4979,19.0402), (50.0755,14.4378), (52.52,13.405), (41.9028,12.4964), (48.2082,16.3738)
    ],
    # 37
    [
        (48.8566,2.3522), (50.0755,14.4378), (47.3769,8.5417), (41.3851,2.1734), (41.9028,12.4964), (40.4168,-3.7038), (48.2082,16.3738)
    ],
    # 38
    [
        (24.453884,54.377343), (23.588,58.3829), (24.8607,67.0011), (25.276987,55.296249), (9.005401,38.763611)
    ],
    # 39
    [
        (53.3498,-6.2603), (51.5074,-0.1278), (45.5017,-73.5673), (59.9139,10.7522), (52.3676,4.9041)
    ],
    # 40
    [
        (4.711,-74.0721), (1.286389,36.817223), (1.944072,30.061885), (9.005401,38.763611)
    ],
    # 41
    [
        (35.6895,139.6917), (34.6937,135.5023), (33.8688,151.2093), (31.2304,121.4737), (37.5665,126.978), (37.8136,144.9631)
    ],
    # 42
    [
        (41.2865,174.7762), (47.8864,106.9057), (33.8688,151.2093), (60.1695,24.9354), (37.5665,126.978), (37.8136,144.9631)
    ],
    # 43
    [
        (25.276987,51.520008), (24.453884,54.377343), (24.7136,46.6753), (29.3759,47.9774), (32.0853,34.7818)
    ],
    # 44
    [
        (59.3293,18.0686), (52.52,13.405), (52.2297,21.0122)
    ],
    # 45
    [
        (55.6761,12.5683), (59.9139,10.7522), (52.3676,4.9041)
    ],
    # 46
    [
        (30.0444,31.2357), (6.5244,3.3792), (36.737232,3.086472), (4.441931,15.266293), (8.838333,13.234444), (33.9249,18.4241)
    ],
    # 47
    [
        (19.432608,-99.133209), (41.8781,-87.6298), (29.7604,-95.3698), (33.4484,-112.074), (32.7767,-96.797), (33.749,-84.388)
    ],
    # 48
    [
        (42.8746,74.5698), (51.1694,71.4491), (47.8864,106.9057), (43.2565,76.9283), (24.8607,67.0011), (31.5204,74.3587), (33.6844,73.0479)
    ],
    # 49
    [
        (21.0285,105.8542), (10.8231,106.6297), (23.8103,90.4125), (6.9271,79.8612), (13.7563,100.5018)
    ],
    # 50
    [
        (21.2854,39.2376), (1.944072,30.061885), (8.838333,13.234444)
    ],
    # 51
    [
        (45.5017,-73.5673), (59.9139,10.7522), (49.2827,-123.1207)
    ],
    # 52
    [
        (40.7128,-74.006), (53.3498,-6.2603), (45.5017,-73.5673), (34.6037,-58.3816), (42.3601,-71.0589), (33.4489,-70.6693)
    ],
    # 53
    [
        (23.8103,90.4125), (6.9271,79.8612), (27.7172,85.324), (19.076,72.8777)
    ],
    # 54
    [
        (36.8485,174.7633), (27.4698,153.0251), (35.6895,139.6917), (14.5995,120.9842), (34.6937,135.5023), (33.8688,151.2093), (1.3521,103.8198)
    ],
    # 55
    [
        (32.0853,34.7818), (41.0082,28.9784), (40.1872,44.5152), (41.7151,44.8271)
    ],
    # 56
    [
        (34.0522,-118.2437), (47.6062,-122.3321), (37.7749,-122.4194), (32.7157,-117.1611)
    ],
    # 57
    [
        (10.4806,-66.9036), (23.5505,-46.6333), (34.6037,-58.3816)
    ],
    # 58
    [
        (31.2304,121.4737), (34.6937,135.5023), (25.032969,121.565418)
    ],
    # 59
    [
        (40.7128,-74.006), (43.65107,-79.347015), (45.5017,-73.5673)
    ],
    # 60
    [
        (43.2565,76.9283), (28.6139,77.209), (31.5204,74.3587), (27.7172,85.324)
    ],
    # 61
    [
        (51.5074,-0.1278), (50.8503,4.3517), (52.3676,4.9041)
    ],
    # 62
    [
        (22.9068,-43.1729), (5.603716,-0.187), (33.589886,-7.603869), (38.7223,-9.1393)
    ],
]

# Requests
requests = [
    (42.5826, 72.1096),
    (52.1366, 86.0042),
    (24.533, 40.2711),
    (41.4759, 62.1823),
    (50.9811, -24.6377),
]

final_result = []
for req in requests:
    candidates = []
    for idx, poly in enumerate(franchisees):
        for region in [poly, convex_hull(poly)]:
            if len(region) >= 3 and point_in_poly(req, region):
                area = polygon_area(region)
                candidates.append((area, idx+1))
    if candidates:
        # Pick the region with the smallest area
        candidates.sort()
        final_result.append(str(candidates[0][1]))
    else:
        # Not inside any region, assign to nearest centroid
        min_dist = float('inf')
        min_idx = -1
        for idx, poly in enumerate(franchisees):
            c = centroid(poly)
            d = dist(req, c)
            if d < min_dist:
                min_dist = d
                min_idx = idx
        final_result.append(str(min_idx+1))

print(",".join(final_result)) 